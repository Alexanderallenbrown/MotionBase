close all
clear

%% Define dimensions
r_base = 0.402;             % radius of platform, in m
r_platform = 0.265;         % radius of base, in m
shortleg = 0.16;            % length of motor arm, in m
longleg = 1;                % length of connecting rod, in m
z0_platform = 1;            % rest height of platform
m = 340/2.2;                % mass of platform   (from Inventor model)
J = [15.63, 35.35, 40.50];  % inertia, kg-m^2    (from Inventor model)

%% Read in raw data
rawdata=csvread('2015-01-24_11-49-26.csv');   % roundabout data file
time1 = rawdata(:,2);

% actual angle, called "MotionRoll/Pitch/Yaw" in data --> checked by
%   inspection of plot_roundabout_data.m
%   --> raw values in radians
angle_x=rawdata(:,24);
angle_y=rawdata(:,25);
angle_z=rawdata(:,26);
angle=[angle_x, angle_y, angle_z];

% linear acceleration, called "AccelerationX/Y/Z" in data
%   --> raw values in g's, want to convert to m/s^2
acc_x=rawdata(:,11).*9.81;
acc_y=rawdata(:,12).*9.81;
acc_z=rawdata(:,13).*9.81;
accel=[acc_x, acc_y, acc_z];

% compose signals for simulink
signal_x=[time1,accel(:,1)];
signal_y=[time1,accel(:,2)];
signal_z=[time1,accel(:,3)];

%% Run simulink motion cueing algorithm
%   --> output is axtilt, aytilt, xdesired, ydesired, zdesired
sim('demostration.slx');
motion_des = [xdesired, ydesired, zdesired];
angle_x = interp1(time1, angle(:,1), simtime);
angle_y = interp1(time1, angle(:,2), simtime);
angle_z = interp1(time1, angle(:,3), simtime);
angle_x= angle_x(~isnan(angle_x));
angle_y= angle_y(~isnan(angle_y));
angle_des = [angle_x(3:end)+axtilt, angle_y(3:end)+aytilt, angle_z(6:end)]; %% had to do stupid things to trim vectors, should fix this later %%

%% Run loop to determine platform position, motor arm angles, motor torques
% notation:
%       P = connection point between connecting rod and platform
%       Q = connection point between motor arm and connecting rod
%       O = connection point between motor arm and base
R_po = zeros(6,3);
R_pq = zeros(6,3);
R_qo = zeros(6,3);
F_pq = zeros(6,3);
Torque = zeros(6,3);
motor_angle = zeros(6,3);
initial = 0;        %   -->  what is this??
opt = zeros(6,1);
x = zeros(6,1);
y = zeros(6,1);
z = zeros(6,1);
error = zeros(6,1);
w_x = zeros(6,1);
w_y = zeros(6,1);
w_z = zeros(6,1);       % angular velocity of short legs
alpha_x = zeros(6,1);
alpha_y = zeros(6,1);
alpha_z = zeros(6,1);       % angular acc of short legs
T = zeros(6,1);
T_qo = zeros(6,3);
omega = zeros(length(opt));
Rpq_x = zeros(6,1);
Rpq_y = zeros(6,1);
Rpq_z = zeros(6,1);
T_qo_x = zeros(6,1);
T_qo_y = zeros(6,1);
T_qo_z = zeros(6,1);
torque = [];
angVel_x = [];
angVel_y = [];
angVel_z = [];
angAcc_x = [];
angAcc_y = [];
angAcc_z = [];
om = [];

for i=1:length(motion_des)    % motion index
    % solve for platform position and "leg" length, pause to see plot
    % (maybe)
    [R_po, motors, platform_points, pos_motor, platformLocal] = platformposition(motion_des(i,:),angle_des(i,:), r_base, r_platform, z0_platform);
    
    % plot it!
    hold on
    grid on
    platformX = [platform_points(1,1),platform_points(2,1),platform_points(3,1),platform_points(1,1)];
    platformY = [platform_points(1,2),platform_points(2,2),platform_points(3,2),platform_points(1,2)];
    platformZ = [platform_points(1,3),platform_points(2,3),platform_points(3,3),platform_points(1,3)];
    baseX = [motors(1,1),motors(2,1),motors(3,1),motors(4,1),motors(5,1),motors(6,1),motors(1,1)];
    baseY = [motors(1,2),motors(2,2),motors(3,2),motors(4,2),motors(5,2),motors(6,2),motors(1,2)];
    baseZ = [motors(1,3),motors(2,3),motors(3,3),motors(4,3),motors(5,3),motors(6,3),motors(1,3)];
    h = plot3(platformX, platformY, platformZ);
    plot3(baseX, baseY, baseZ)
    view(-205,45)
    pause(0.001)
    
    if i>1
        w_x=(angle_x(i)-angle_x(i-1))/0.05;
        w_y=(angle_y(i)-angle_y(i-1))/0.05;
        w_z=0;
    else
        w_x=0;
        w_y=0;
        w_z=0;
    end
    
    angVel_x = [angVel_x,w_x]; % write old variables
    angVel_y = [angVel_y,w_y];
    angVel_z = [angVel_z,w_z];
    
    if i>2
        alpha_x=(angVel_x(i-1)-angVel_x(i-2))/0.05;
        alpha_y=(angVel_y(i-1)-angVel_y(i-2))/0.05;
        alpha_z=0;
    else
        alpha_x=0;
        alpha_y=0;
        alpha_z=0;
    end
    
    angAcc_x = [angAcc_x,alpha_x]; % write old variables
    angAcc_y = [angAcc_y,alpha_y];
    angAcc_z = [angAcc_z,alpha_z];
    
    theta = [alpha_x, alpha_y, alpha_z]/180*pi/4;
    
    % find angles for motor arms using fminsearch
    for j = 1:6             % leg index
        angle = @ (parm) findpq_leg(R_po(j,:), shortleg, longleg, pos_motor(j), parm);
        [opt(i,j)] = fminsearch(angle, initial);
        [error, x, y, z] = angle(opt(i,j));
        R_qo = [x, y, z];
        R_pq = R_po(j,:) - R_qo;
        Rpq_x(j) = R_pq(1);     % had to disassemble R_pq so that it would write to j
        Rpq_y(j) = R_pq(2);
        Rpq_z(j) = R_pq(3);
        
    end
    
    R_pq = [Rpq_x, Rpq_y, Rpq_z];       % reassemble
    
    % find force, torque on each leg
    for k = 1:6
        [F_pq] = forceplatform(m, J, R_pq(1,:), R_pq(2,:), R_pq(3,:), R_pq(4,:), R_pq(5,:), R_pq(6,:), platformLocal(1,:), platformLocal(2,:), platformLocal(3,:), motion_des(i,:), theta);
        
        for m = 1:6
            T_qo = cross(R_qo, -F_pq(m,:));
            T_qo_x(m) = T_qo(1);     % had to disassemble R_pq so that it would write to j
            T_qo_y(m) = T_qo(2);
            T_qo_z(m) = T_qo(3);
        end
        
        T_qo = [T_qo_x, T_qo_y, T_qo_z];    % reassemble
        T(k) = dot(motors(k,:), T_qo(k,:));
    end
    

    
    torque = [torque; T];

%     h_old = h;
%     delete(h_old);
%     drawnow
end

% calculate angular velocity

for n = 1:6
    opt_new = opt(:,n);               % split angle matrix into columns
    for i=1:length(opt)        % motion index
        if i>1
            omega(i)= (opt(i)-opt(i-1))/.05;
        else
            omega(i) = 0;
        end
    end
    om = [om; omega];                 % save old vars
end

figure()
plot(abs(om),torque)
xlabel 'omega'
ylabel 'torque'




